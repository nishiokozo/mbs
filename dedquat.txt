#include <math.h>
#include <stdio.h>
#include "matrix.h"
#include "vector.h"




//-----------------------------------------------------------------------------
// Name: math_MatrixMultiply()
// Desc: Does the matrix operation: [Q] = [A] * [B].
//-----------------------------------------------------------------------------
VOID math_MatrixMultiply( matrix& q, matrix& a, matrix& b )
{
    float* pA = (float*)&a;
    float* pB = (float*)&b;
    float  pM[16];

    ZeroMemory( pM, sizeof(matrix) );

    for( WORD i=0; i<4; i++ ) 
        for( WORD j=0; j<4; j++ ) 
            for( WORD k=0; k<4; k++ ) 
                pM[4*i+j] += pA[4*k+j] * pB[4*i+k];

    memcpy( &q, pM, sizeof(matrix) );
}




//-----------------------------------------------------------------------------
// Name: math_MatrixInvert()
// Desc: Does the matrix operation: [Q] = inv[A]. Note: this function only
//       works for matrices with [0 0 0 1] for the 4th column.
//-----------------------------------------------------------------------------
HRESULT math_MatrixInvert( matrix& q, matrix& a )
{
    if( fabs(a.m[3][3] - 1.0f) > .001f)
        return E_INVALIDARG;
    if( fabs(a.m[0][3]) > .001f || fabs(a.m[1][3]) > .001f || fabs(a.m[2][3]) > .001f )
        return E_INVALIDARG;

    float fDetInv = 1.0f / ( a.m[0][0] * ( a.m[1][1] * a.m[2][2] - a.m[1][2] * a.m[2][1] ) -
                             a.m[0][1] * ( a.m[1][0] * a.m[2][2] - a.m[1][2] * a.m[2][0] ) +
                             a.m[0][2] * ( a.m[1][0] * a.m[2][1] - a.m[1][1] * a.m[2][0] ) );

    q.m[0][0] =  fDetInv * ( a.m[1][1] * a.m[2][2] - a.m[1][2] * a.m[2][1] );
    q.m[0][1] = -fDetInv * ( a.m[0][1] * a.m[2][2] - a.m[0][2] * a.m[2][1] );
    q.m[0][2] =  fDetInv * ( a.m[0][1] * a.m[1][2] - a.m[0][2] * a.m[1][1] );
    q.m[0][3] = 0.0f;

    q.m[1][0] = -fDetInv * ( a.m[1][0] * a.m[2][2] - a.m[1][2] * a.m[2][0] );
    q.m[1][1] =  fDetInv * ( a.m[0][0] * a.m[2][2] - a.m[0][2] * a.m[2][0] );
    q.m[1][2] = -fDetInv * ( a.m[0][0] * a.m[1][2] - a.m[0][2] * a.m[1][0] );
    q.m[1][3] = 0.0f;

    q.m[2][0] =  fDetInv * ( a.m[1][0] * a.m[2][1] - a.m[1][1] * a.m[2][0] );
    q.m[2][1] = -fDetInv * ( a.m[0][0] * a.m[2][1] - a.m[0][1] * a.m[2][0] );
    q.m[2][2] =  fDetInv * ( a.m[0][0] * a.m[1][1] - a.m[0][1] * a.m[1][0] );
    q.m[2][3] = 0.0f;

    q.m[3][0] = -( a.m[3][0] * q.m[0][0] + a.m[3][1] * q.m[1][0] + a.m[3][2] * q.m[2][0] );
    q.m[3][1] = -( a.m[3][0] * q.m[0][1] + a.m[3][1] * q.m[1][1] + a.m[3][2] * q.m[2][1] );
    q.m[3][2] = -( a.m[3][0] * q.m[0][2] + a.m[3][1] * q.m[1][2] + a.m[3][2] * q.m[2][2] );
    q.m[3][3] = 1.0f;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: math_VectorMatrixMultiply()
// Desc: Multiplies a vector by a matrix
//-----------------------------------------------------------------------------
HRESULT math_VectorMatrixMultiply( vector& vDest, vector& vSrc,
                                      matrix& mat)
{
    float x = vSrc.x*mat.m[0][0] + vSrc.y*mat.m[1][0] + vSrc.z* mat.m[2][0] + mat.m[3][0];
    float y = vSrc.x*mat.m[0][1] + vSrc.y*mat.m[1][1] + vSrc.z* mat.m[2][1] + mat.m[3][1];
    float z = vSrc.x*mat.m[0][2] + vSrc.y*mat.m[1][2] + vSrc.z* mat.m[2][2] + mat.m[3][2];
    float w = vSrc.x*mat.m[0][3] + vSrc.y*mat.m[1][3] + vSrc.z* mat.m[2][3] + mat.m[3][3];
    
    if( fabs( w ) < g_EPSILON )
        return E_INVALIDARG;

    vDest.x = x/w;
    vDest.y = y/w;
    vDest.z = z/w;

    return S_OK;
}




//-----------------------------------------------------------------------------
// Name: math_VertexMatrixMultiply()
// Desc: Multiplies a vertex by a matrix
//-----------------------------------------------------------------------------
HRESULT math_VertexMatrixMultiply( D3DVERTEX& vDest, D3DVERTEX& vSrc,
                                      matrix& mat )
{
    HRESULT    hr;
    vector* pSrcVec  = (vector*)&vSrc.x;
    vector* pDestVec = (vector*)&vDest.x;

    if( SUCCEEDED( hr = math_VectorMatrixMultiply( *pDestVec, *pSrcVec,
                                                      mat ) ) )
    {
        pSrcVec  = (vector*)&vSrc.nx;
        pDestVec = (vector*)&vDest.nx;
        hr = math_VectorMatrixMultiply( *pDestVec, *pSrcVec, mat );
    }
    return hr;
}




//-----------------------------------------------------------------------------
// Name: math_QuaternionFromRotation()
// Desc: Converts a normalized axis and angle to a unit quaternion.
//-----------------------------------------------------------------------------
VOID math_QuaternionFromRotation( float& x, float& y, float& z, float& w,
                                     vector& v, float fTheta )
{
    x = sinf(fTheta/2) * v.x;
    y = sinf(fTheta/2) * v.y;
    z = sinf(fTheta/2) * v.z;
    w = cosf(fTheta/2);
}




//-----------------------------------------------------------------------------
// Name: math_RotationFromQuaternion()
// Desc: Converts a normalized axis and angle to a unit quaternion.
//-----------------------------------------------------------------------------
VOID math_RotationFromQuaternion( vector& v, float& fTheta,
                                     float x, float y, float z, float w )
                                      
{
    fTheta = (float)( acos(w) * 2 );
    v.x    = (float)( x / sin(fTheta/2) );
    v.y    = (float)( y / sin(fTheta/2) );
    v.z    = (float)( z / sin(fTheta/2) );
}




//-----------------------------------------------------------------------------
// Name: math_QuaternionFromAngles()
// Desc: Converts euler angles to a unit quaternion.
//-----------------------------------------------------------------------------
VOID math_QuaternionFromAngles( float& x, float& y, float& z, float& w,
                                   float fYaw, float fPitch, float fRoll )
                                        
{
    float fSinYaw   = sinf(fYaw/2);
    float fSinPitch = sinf(fPitch/2);
    float fSinRoll  = sinf(fRoll/2);
    float fCosYaw   = cosf(fYaw/2);
    float fCosPitch = cosf(fPitch/2);
    float fCosRoll  = cosf(fRoll/2);

    x = fSinRoll * fCosPitch * fCosYaw - fCosRoll * fSinPitch * fSinYaw;
    y = fCosRoll * fSinPitch * fCosYaw + fSinRoll * fCosPitch * fSinYaw;
    z = fCosRoll * fCosPitch * fSinYaw - fSinRoll * fSinPitch * fCosYaw;
    w = fCosRoll * fCosPitch * fCosYaw + fSinRoll * fSinPitch * fSinYaw;
}




//-----------------------------------------------------------------------------
// Name: math_MatrixFromQuaternion()
// Desc: Converts a unit quaternion into a rotation matrix.
//-----------------------------------------------------------------------------
VOID math_MatrixFromQuaternion( matrix& mat, float x, float y, float z,
                                   float w )
{
    float xx = x*x; float yy = y*y; float zz = z*z;
    float xy = x*y; float xz = x*z; float yz = y*z;
    float wx = w*x; float wy = w*y; float wz = w*z;
    
    mat.m[0][0] = 1 - 2 * ( yy + zz ); 
    mat.m[0][1] =     2 * ( xy - wz );
    mat.m[0][2] =     2 * ( xz + wy );

    mat.m[1][0] =     2 * ( xy + wz );
    mat.m[1][1] = 1 - 2 * ( xx + zz );
    mat.m[1][2] =     2 * ( yz - wx );

    mat.m[2][0] =     2 * ( xz - wy );
    mat.m[2][1] =     2 * ( yz + wx );
    mat.m[2][2] = 1 - 2 * ( xx + yy );

    mat.m[0][3] = mat.m[1][3] = mat.m[2][3] = 0.0f;
    mat.m[3][0] = mat.m[3][1] = mat.m[3][2] = 0.0f;
    mat.m[3][3] = 1.0f;
}




//-----------------------------------------------------------------------------
// Name: math_QuaternionFromMatrix()
// Desc: Converts a rotation matrix into a unit quaternion.
//-----------------------------------------------------------------------------
VOID math_QuaternionFromMatrix( float& x, float& y, float& z, float& w,
                                   matrix& mat )
{
    if( mat.m[0][0] + mat.m[1][1] + mat.m[2][2] > 0.0f )
    {
        float s = (float)sqrt( mat.m[0][0] + mat.m[1][1] + mat.m[2][2] + mat.m[3][3] );

        x = (mat.m[1][2]-mat.m[2][1]) / (2*s);
        y = (mat.m[2][0]-mat.m[0][2]) / (2*s);
        z = (mat.m[0][1]-mat.m[1][0]) / (2*s);
        w = 0.5f * s;
    }
    else
    {


    }
    float xx = x*x; float yy = y*y; float zz = z*z;
    float xy = x*y; float xz = x*z; float yz = y*z;
    float wx = w*x; float wy = w*y; float wz = w*z;
    
    mat.m[0][0] = 1 - 2 * ( yy + zz ); 
    mat.m[0][1] =     2 * ( xy - wz );
    mat.m[0][2] =     2 * ( xz + wy );

    mat.m[1][0] =     2 * ( xy + wz );
    mat.m[1][1] = 1 - 2 * ( xx + zz );
    mat.m[1][2] =     2 * ( yz - wx );

    mat.m[2][0] =     2 * ( xz - wy );
    mat.m[2][1] =     2 * ( yz + wx );
    mat.m[2][2] = 1 - 2 * ( xx + yy );

    mat.m[0][3] = mat.m[1][3] = mat.m[2][3] = 0.0f;
    mat.m[3][0] = mat.m[3][1] = mat.m[3][2] = 0.0f;
    mat.m[3][3] = 1.0f;
}




//-----------------------------------------------------------------------------
// Name: math_QuaternionMultiply()
// Desc: Mulitples two quaternions together as in {Q} = {A} * {B}.
//-----------------------------------------------------------------------------
VOID math_QuaternionMultiply( float& Qx, float& Qy, float& Qz, float& Qw,
                                  float Ax, float Ay, float Az, float Aw,
                                  float Bx, float By, float Bz, float Bw )
{
    float Dx = Bw*Ax + Bx*Aw + By*Az + Bz*Ay;
    float Dy = Bw*Ay + By*Aw + Bz*Ax + Bx*Az;
    float Dz = Bw*Az + Bz*Aw + Bx*Ay + By*Ax;
    float Dw = Bw*Aw + Bx*Ax + By*Ay + Bz*Az;

    Qx = Dx; Qy = Dy; Qz = Dz; Qw = Dw;
}




//-----------------------------------------------------------------------------
// Name: math_SlerpQuaternions()
// Desc: Compute a quaternion which is the spherical linear interpolation
//       between two other quaternions by dvFraction.
//-----------------------------------------------------------------------------
VOID math_QuaternionSlerp( float& Qx, float& Qy, float& Qz, float& Qw,
                              float Ax, float Ay, float Az, float Aw,
                              float Bx, float By, float Bz, float Bw,
                              float fAlpha )
{
    float fScale1;
    float fScale2;

    // Compute dot product, aka cos(theta):
    float fCosTheta = Ax*Bx + Ay*By + Az*Bz + Aw*Bw;

    if( fCosTheta < 0.0f )
    {
        // Flip start quaternion
        Ax = -Ax; Ay = -Ay; Ax = -Az; Aw = -Aw;
        fCosTheta = -fCosTheta;
    }

    if( fCosTheta + 1.0f > 0.05f )
    {
        // If the quaternions are close, use linear interploation
        if( 1.0f - fCosTheta < 0.05f )
        {
            fScale1 = 1.0f - fAlpha;
            fScale2 = fAlpha;
        }
        else // Otherwise, do spherical interpolation
        {
            float fTheta    = acosf( fCosTheta );
            float fSinTheta = sinf( fTheta );
            
            fScale1 = sinf( fTheta * (1.0f-fAlpha) ) / fSinTheta;
            fScale2 = sinf( fTheta * fAlpha ) / fSinTheta;
        }
    }
    else
    {
        Bx = -Ay;
        By =  Ax;
        Bz = -Aw;
        Bw =  Az;
        fScale1 = sinf( g_PI * (0.5f - fAlpha) );
        fScale2 = sinf( g_PI * fAlpha );
    }

    Qx = fScale1 * Ax + fScale2 * Bx;
    Qy = fScale1 * Ay + fScale2 * By;
    Qz = fScale1 * Az + fScale2 * Bz;
    Qw = fScale1 * Aw + fScale2 * Bw;
}



